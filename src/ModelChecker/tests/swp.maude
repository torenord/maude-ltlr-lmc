
****************************
*** Basic Data Structure ***
****************************

fmod NAT-MAP{Y :: TRIV} is 
  protecting MAP{Nat,Y} * (op  _|->_ to ([_,_]) , op (_,_) to _;_) .
  protecting INT .

  vars I J K : Nat .
  var M M' :  Map{Nat,Y} .
  var X : Y$Elt .

  op 1st-undef : Map{Nat,Y} -> Nat .            *** first index for which map undefined
  op 1st-undef-aux : Map{Nat,Y} Nat -> Nat .            
  eq 1st-undef(M) = 1st-undef-aux(M,0) .
  eq 1st-undef-aux((M ; [I,X]),I) = if $hasMapping(M,I) 
                                          then I else 1st-undef-aux((M),s(I)) fi .
  eq 1st-undef-aux(M,I) = I [owise] .

  op max-index : Map{Nat,Y} -> Int .            *** biggest index for which map defined
  eq max-index(empty) = -1 .
  eq max-index(M ; [I,X]) = max(I,max-index(M)) .


  op _|_ :  Map{Nat,Y} Nat ->  Map{Nat,Y} .  *** restriction to indices smaller than 2nd argument
  ceq (M ; [I,X]) | J = M | J if J <= I .
  eq M | J = M [owise] .

  op _<=_ :  Map{Nat,Y} Map{Nat,Y} -> Bool .  *** map containment
  eq M <= M ; M' = true .
  eq M <= M' = false [owise] .

  op _in_ : Entry{Nat,Y} Map{Nat,Y} -> Bool .  *** membership in a map 
  eq [I,X] in [I,X] ; M = true .
  eq [I,X] in  M = false [owise] .
endfm

fmod NAT-QID-MAP is protecting NAT-MAP{Qid} . 
  op p : Nat -> NzNat .
  vars N M : Nat .
  eq p(s(N)) = N .
endfm

view Entry from TRIV to NAT-QID-MAP is sort Elt to Entry{Nat,Qid} . endv

fmod NAT-QID-MAP&LIST is protecting LIST{Entry} .
  op _[_:_] : Map{Nat,Qid} Nat Nat -> List{Entry} . *** extracts from a map a list between two indices
  vars I J K : Nat .
  var M :  Map{Nat,Qid} .
  var Q : Qid .
  ceq M[I : J] = nil if I > J .
  ceq (M ; [I,Q]) [I : J] =  if $hasMapping(M,I) then (M ; [I,Q]) [s(I) : J]
                                                else [I,Q] (M[s(I) : J]) fi if  I <= J .  
  eq  M[I : J] = M[s(I) : J] [owise] .

  op _<_:_> : Map{Nat,Qid} Nat Nat -> Map{Nat,Qid} . *** extracts a submap between two indices
  ceq M < I : J > = empty if I > J .
  ceq (M ; [I,Q]) < I : J > =  if $hasMapping(M,I) then (M ; [I,Q]) < s(I) : J >
                                                else [I,Q] ; (M < s(I) : J >) fi if  I <= J .  
  eq  M < I : J > = M < s(I) : J > [owise] .
endfm

****************************
*** Sliding Window Model ***
****************************

mod SLIDING-WINDOW is 
  protecting NAT-QID-MAP&LIST .  
  protecting INT .
  sorts Pid NodeQState GlobalState .
  op [_,_,_,_,_,_,_,_] : Pid Nat Nat NzNat NzNat Map{Nat,Qid} Map{Nat,Qid} List{Entry} -> NodeQState [ctor] .
  op _&_ : NodeQState NodeQState -> GlobalState [comm ctor] .

  vars P P' : Pid .  var Q : Qid .
  vars I NR NR' NA NA' : Nat .  vars B B' : NzNat .
  vars M1 M2 M1' M2' OM : Map{Nat,Qid} .
  vars F F' L G : List{Entry} .

  crl [send] : [P,NR,NA,B,B',M1,M2,F] & [P',NR',NA',B',B,M1',M2',F'] 
            => [P,NR,NA,B,B',M1,M2,F] & [P',NR',NA',B',B,M1',M2',F'[I,Q]] 
   if NR + B > NA /\ [I,Q] ; OM := M1 < NA : p(NR + B)> .


  rl [rec] : [P,NR,NA,B,B',M1,M2,[I,Q]F] 
       => if $hasMapping(M2,I) then
             [P,NR,NA,B,B',M1,M2,F] 
          else
             [P,1st-undef(M2 ;[I,Q]),max(NA,(I - B')+ 1),B,B',M1,M2 ;[I,Q],F] 
          fi .

  rl [loss] : [P,NR,NA,B,B',M1,M2,L [I,Q] G] => [P,NR,NA,B,B',M1,M2,L G] .
endm


************************
*** Abstracted Model ***
************************

mod SLIDING-WINDOW-ABSTRACTION is 
  protecting NAT-QID-MAP&LIST .  
  protecting INT .

  sorts Pid NodeQState GlobalState .
  *** The fifo queues are now abstracted into bags, implicitly adding a commutativity equation,
  op [_,_,_,_,_,_,_,_] : Pid Nat Nat NzNat NzNat Map{Nat,Qid} Map{Nat,Qid} Map{Nat,Qid} -> NodeQState [ctor] .

  op _&_ : NodeQState NodeQState -> GlobalState [comm ctor] .

  vars P P' : Pid .  var Q : Qid .
  vars I NR NR' NA NA' : Nat .  vars B B' : NzNat .
  vars M1 M2 M1' M2' OM F F' L G : Map{Nat,Qid} .

*** Furthermore, duplicated messages in transit are removed by the following abstraction equation:
  eq  [P,NR,NA,B,B',M1,M2,L ; [I,Q] ; [I,Q]] = [P,NR,NA,B,B',M1,M2,L ; [I,Q]] .

  crl [send] : [P,NR,NA,B,B',M1,M2,F] & [P',NR',NA',B',B,M1',M2',F'] 
            => [P,NR,NA,B,B',M1,M2,F] & [P',NR',NA',B',B,M1',M2',F' ; [I,Q]] 
   if NR + B > NA /\ [I,Q] ; OM := M1 < NA : p(NR + B)> .
   

  rl [rec] : [P,NR,NA,B,B',M1,M2,[I,Q] ; F] 
       => if $hasMapping(M2,I) then
             [P,NR,NA,B,B',M1,M2,F] 
          else
             [P,1st-undef(M2 ;[I,Q]),max(NA,(I - B')+ 1),B,B',M1,M2 ;[I,Q],F] 
          fi .


  rl [loss] : [P,NR,NA,B,B',M1,M2,L ; [I,Q]] => [P,NR,NA,B,B',M1,M2,L] .

*** New rules added for coherence reasons.
  rl [rec] : [P,NR,NA,B,B',M1,M2,[I,Q] ; F] 
       => if $hasMapping(M2,I) then
             [P,NR,NA,B,B',M1,M2,[I,Q] ; F] 
          else
             [P,1st-undef(M2 ;[I,Q]),max(NA,(I - B')+ 1),B,B',M1,M2 ;[I,Q],F]
          fi .

  rl [loss] : [P,NR,NA,B,B',M1,M2,L ; [I,Q]] => [P,NR,NA,B,B',M1,M2,L ; [I,Q]] .
endm

load ltlr-checker

*********************************
*** Propositions for original ***
*********************************

mod SLIDING-WINDOW-PROPS is 
  protecting SLIDING-WINDOW .  
  including SATISFACTION .
  subsort GlobalState < State .
  op NR-correct : Pid -> Prop .
  op NR>=NA' : Pid -> Prop .
  op rec-correct : Pid -> Prop .
  op wrong-data-in-fifo : Pid -> Prop .
  op successful-transmission : -> Prop .
  op in-fifo : Pid Nat Qid -> Prop .
  op in-rec : Pid Nat Qid -> Prop .

  vars P P' : Pid .  var Q : Qid .
  vars I NR NR' NA NA' : Nat .  vars B B' : NzNat .
  vars M1 M2 M1' M2' M N : Map{Nat,Qid} .
  vars F F' L G : List{Entry} .

  eq [P,NR,NA,B,B',M1,M2,F]&[P',NR',NA',B',B,M1',M2',F'] |= NR-correct(P) = (NR == 1st-undef(M2)) .
  eq [P,NR,NA,B,B',M1,M2,F]&[P',NR',NA',B',B,M1',M2',F'] |= NR>=NA'(P) = (NR >= NA') .
  eq [P,NR,NA,B,B',M1,M2,F]&[P',NR',NA',B',B,M1',M2',F'] |= rec-correct(P) = 
                                         (M2 <= M1') and (NA > max-index(M2) - B') .
  ceq [P,NR,NA,B,B',M1,M2,L [I,Q] G]&[P',NR',NA',B',B,M1',M2',F'] |=  wrong-data-in-fifo(P) = true
                                          if (([I,Q] in M1' == false) or (I >= NR' + B')) .
  eq [P,NR,NA,B,B',M1,M1',F]&[P',NR',NA',B',B,M1',M1,F'] |=  successful-transmission = true .
  eq [P,NR,NA,B,B',M1,M2,L [I,Q] G]&[P',NR',NA',B',B,M1',M2',F'] |=  in-fifo(P,I,Q) = true .
  eq [P,NR,NA,B,B',M1,M ; [I,Q] ; N,F]&[P',NR',NA',B',B,M1',M2',F'] |=  in-rec(P,I,Q) = true .
endm

************************************
*** Propositions for abstraction ***
************************************

mod SLIDING-WINDOW-ABSTRACTION-PROPS is 
  protecting SLIDING-WINDOW-ABSTRACTION .  
  including SATISFACTION .
  subsort GlobalState < State .
  op NR-correct : Pid -> Prop .
  op NR>=NA' : Pid -> Prop .
  op rec-correct : Pid -> Prop .
  op wrong-data-in-fifo : Pid -> Prop .   *** not a fifo anymore, but name kept
  op successful-transmission : -> Prop .
  op in-fifo : Pid Nat Qid -> Prop .     *** not a fifo anymore, but name kept
  op in-rec : Pid Nat Qid -> Prop .

  vars P P' : Pid .  var Q : Qid .
  vars I NR NR' NA NA' : Nat .  vars B B' : NzNat .
  vars M1 M2 M1' M2' OM M N F F' L G : Map{Nat,Qid} .

  eq [P,NR,NA,B,B',M1,M2,F]&[P',NR',NA',B',B,M1',M2',F'] |= NR-correct(P) = (NR == 1st-undef(M2)) .
  eq [P,NR,NA,B,B',M1,M2,F]&[P',NR',NA',B',B,M1',M2',F'] |= NR>=NA'(P) = (NR >= NA') .
  eq [P,NR,NA,B,B',M1,M2,F]&[P',NR',NA',B',B,M1',M2',F'] |= rec-correct(P) = 
                                         (M2 <= M1') and (NA > max-index(M2) - B') .
  ceq [P,NR,NA,B,B',M1,M2,L ; [I,Q]]&[P',NR',NA',B',B,M1',M2',F'] |=  wrong-data-in-fifo(P) = true 
   if (([I,Q] in M1' == false) or (I >= NR' + B')) .
  eq [P,NR,NA,B,B',M1,M1',F]&[P',NR',NA',B',B,M1',M1,F'] |=  successful-transmission = true .
  eq [P,NR,NA,B,B',M1,M2,L ; [I,Q]]&[P',NR',NA',B',B,M1',M2',F'] |=  in-fifo(P,I,Q) = true .
  eq [P,NR,NA,B,B',M1,M ; [I,Q] ; N,F]&[P',NR',NA',B',B,M1',M2',F'] |=  in-rec(P,I,Q) = true .
endm

mod MODEL-CHECK-LIVENESS-SLIDING-WINDOW-ABSTRACTION is 
  protecting SLIDING-WINDOW-ABSTRACTION-PROPS .
  including LTLR-MODEL-CHECKER .
  including SPATIAL-ACTION-PATTERN .
  including LTL-SIMPLIFIER .

  ops p q : -> Pid .

  vars P P' : Pid .  var Q : Qid .
  vars I J NR NR' NA NA' : Nat .  vars B B' : NzNat .
  vars M1 M2 M1' M2' OM M N F F' L G : Map{Nat,Qid} .

  op enabled : Action -> Prop .
  op send : Pid Nat Qid -> Action .

  eq {CT:StateContext | 'send : 'P \ P ; 'I \ I ; 'Q \ Q ; SS:StateSubstitution} |=
    send(P,I,Q) = true .

  ceq [P,NR,NA,B,B',M1,M2,F] & [P',NR',NA',B',B,M1',M2',F'] |= 
    enabled(send(P,I,Q)) = true
   if NR + B > NA /\ [I,Q] ; OM := M1 < NA : p(NR + B)> .
  eq G:GlobalState |= enabled(A:Action) = false [owise] .

  op msg : Nat Pid -> Map{Nat,Qid} .
  op msg : Nat Nat Pid -> Map{Nat,Qid} .
  eq msg(I, P) = msg(I, I, P) .
  eq msg(I, s(J), p) = [J, qid(char((65 + I) - s(J)))] ; msg(I, J, p) .
  eq msg(I, s(J), q) = [J, qid(char((90 - I) + s(J)))] ; msg(I, J, q) .
  eq msg(I, 0, P) = empty .

  --- initial (window_size, msg_size)
  op initial : Nat Nat -> GlobalState .
  eq initial(B,B') = 
      [p,0,0,B,B,msg(B',p),empty,empty]& [q,0,0,B,B,msg(B',q),empty,empty] .

----------------------------
--- proof term signature ---
----------------------------

  sort Context$GlobalState .
  subsort GlobalState < Context$GlobalState < StateContext .
  op _&_ : Context$NodeQState NodeQState -> Context$GlobalState [ditto] .
  op _&_ : NodeQState Context$NodeQState -> Context$GlobalState [ditto] .
  op [] : -> Context$GlobalState [ctor] .

  sort Context$NodeQState .
  subsort NodeQState < Context$NodeQState .
  op [] : -> Context$NodeQState [ctor] .
  op _\_ : Qid Pid -> StateAssignment [ctor prec 63] .
  op _\_ : Qid Nat -> StateAssignment [ctor prec 63] .
  op _\_ : Qid Qid -> StateAssignment [ctor prec 63] .

  op modelCheckParamFair : State Formula FairnessSet FairFlag ~> ModelCheckResult
      [special (id-hook LTLRFairnessCheckerSymbol
	      op-hook holeSymbol	([] : ~> Context$GlobalState)
	      op-hook holeSymbol	([] : ~> Context$NodeQState)
	      op-hook assignmentSymbol	(_\_ : Qid Pid ~> StateAssignment)
	      op-hook assignmentSymbol  (_\_ : Qid Nat ~> StateAssignment)
	      op-hook assignmentSymbol  (_\_ : Qid Qid ~> StateAssignment)
    )] .


  --- should be AUTOMATICALLY GENERATED by FULL-Maude
  rl [test1]: 
	realizedProps(
	    [P,NR,NA,B,B',M1,M2,L ; [I,Q]]&[P',NR',NA',B',B,M1',M2',F'], 
	    nil)
     => realizedProps(
	    [P,NR,NA,B,B',M1,M2,L ; [I,Q]]&[P',NR',NA',B',B,M1',M2',F'], 
	    (in-fifo(P,I,Q))) .
  eq realizedProps(S:State, (in-fifo(P:Pid,I:Nat,Q:Qid)))
   = realFair(fair : in-fifo(P:Pid,I:Nat,Q:Qid) => in-rec(P:Pid,I:Nat,Q:Qid)) . 
  crl [test2]:
	realizedProps(
	    [P,NR,NA,B,B',M1,M2,F] & [P',NR',NA',B',B,M1',M2',F'],
	    nil)
     => realizedProps(
	    [P,NR,NA,B,B',M1,M2,F] & [P',NR',NA',B',B,M1',M2',F'],
	    (enabled(send(P,I,Q))))
   if NR + B > NA /\ [I,Q] ; OM := M1 < NA : p(NR + B)> .
  eq realizedProps(S:State, (enabled(send(P,I,Q))))
   = realFair(just : enabled(send(P,I,Q)) => send(P,I,Q)) .
endm

set verbose on .

--- safety
red modelCheck(initial(1,4), [] (NR-correct(p) /\ NR-correct(q) /\ NR>=NA'(p) /\ NR>=NA'(q) /\ rec-correct(p) /\
    rec-correct(q) /\ (~ wrong-data-in-fifo(p)) /\ (~ wrong-data-in-fifo(q)))) .

--- liveness
red modelCheckParamFair(initial(1,3), <> successful-transmission,
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(initial(2,3), <> successful-transmission,
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(initial(3,3), <> successful-transmission,
    noFairness, flag(seParam,jfParam)) .

red modelCheckParamFair(initial(1,5), <> successful-transmission,
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(initial(2,5), <> successful-transmission,
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(initial(3,5), <> successful-transmission,
    noFairness, flag(seParam,jfParam)) .

