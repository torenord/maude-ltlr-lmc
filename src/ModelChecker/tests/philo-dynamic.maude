
mod PHILO is pr NAT .

  sorts Philo Status .
  op ph : Nat Status Nat -> Philo [ctor] .
  ops think hungry : -> Status [ctor] .

  sort Chopstick .
  op stk : Nat -> Chopstick [ctor] .

  sort Conf .
  subsorts Philo Chopstick < Conf .
  op none : -> Conf [ctor] .
  op _;_ : Conf Conf -> Conf [ctor comm assoc id: none] .

  sort Top .
  op <_,_,_> : Nat Nat Conf -> Top .

  vars P Q N C : Nat .  var I J : NzNat . var CF : Conf .

--- equations
  ops left collatz : Nat -> Nat .
  op right : Nat Nat -> Nat .

  eq left(I) = I .
  eq right(I, N) = s(I rem N) .
  eq collatz(P) = if P rem 2 == 0 then P quo 2 else 3 * P + 1 fi .

--- rules
  rl [wake]: ph(I, think, 0) => ph(I, hungry, 0) . 

  crl [grab]: < P, N, ph(I, hungry, C) ; stk(J) ; CF >
           => < P, N, ph(I, hungry, C + 1) ; CF > 
   if J == left(I) or J == right(I, N) .

  rl [stop]: < P, N, ph(I, hungry, 2) ; CF > 
          => < P, N, ph(I, think, 0) ; stk(left(I)) ; stk(right(I,N)) ; CF > .

  rl [solve]: < s s P, N, ph(I, think, 0) ; CF >
	  =>  < collatz(s s P), N, ph(I, think, 0) ; CF > .

  crl [join]: < P, N, ph(N, think, 0) ; CF > 
           => < P, s N, ph(N, think, 0) ; CF ; ph(s N, think, 0) ; stk(s N) > 
   if P rem N == 0 .

  rl [leave]: < P, s s s N, CF ; ph(s s s N, think, 0) ; stk(s s s N) > 
           => < P, s s N, CF > .

  --- initial state
  op init : Nat -> Top .
  eq init(P) = < P, 2, ph(1, think, 0) ; stk(1) ; ph(2, think, 0) ; stk(2) > .
endm

load ltlr-checker

mod TEST-CHECK is
  pr PHILO .
  inc LTLR-MODEL-CHECKER .
  inc SPATIAL-ACTION-PATTERN .

  subsort Top < State .

  --- support signature
  sorts Context$Conf Context$Top .
  subsorts Conf < Context$Conf .
  subsorts Top < Context$Top < StateContext .

  op _;_ : Context$Conf Conf -> Context$Conf [ditto] .
  op _;_ : Conf Context$Conf -> Context$Conf [ditto] .
  op <_,_,_> : Nat Nat Context$Conf -> Context$Top .
  op [] : -> Context$Conf [ctor] .
  op [] : -> Context$Top [ctor] .

  op _\_ : Qid Nat -> StateAssignment [ctor prec 63] .

  op modelCheckParamFair : State Formula FairnessSet FairFlag ~> ModelCheckResult
      [special (id-hook LTLRFairnessCheckerSymbol
            op-hook assignmentSymbol (_\_ : Qid Nat ~> StateAssignment)
            op-hook holeSymbol       ([] : ~> Context$Conf)
            op-hook holeSymbol       ([] : ~> Context$Top)
  )] .

  vars P Q N C : Nat .  var I J : NzNat . var CF : Conf .
  var CONTEXT : StateContext . var SS : StateSubstitution .

--- state propositions
  op enabled : Action -> Prop .
  op eating : Nat -> Prop .

  eq < P, N, ph(I, hungry, 2) ; CF > |= eating(I) = true .

  eq < P, N, ph(I, think, 0) ; CF > |= enabled({'wake}) = true .
  ceq < P, N, ph(I, hungry, C) ; stk(J) ; CF > |= enabled({'grab}) = true
   if J == left(I) or J == right(I, N) .

  eq < P, N, ph(I, think, 0) ; CF > |= enabled({'wake : 'I \ I}) = true .
  ceq < P, N, ph(I, hungry, C) ; stk(J) ; CF > |= enabled({'grab : 'I \ I}) 
    = true
   if J == left(I) or J == right(I, N) .

  --- resource hierarchy check : grab lower id first? (for 4)
  op lowerFirst : -> Action .
  ceq {CONTEXT | 'grab : 'I \ I ; 'J \ J ; 'N \ N ; 'C \ 0 ; SS} |= lowerFirst 
    = true 
   if (I < N and J == I) or (I == N and J == 1) .


--- should be AUTOMATICALLY GENERATED by FULL-Maude
  rl [test1]:
        realizedProps(< P, N, ph(I, think, 0) ; CF >,
	    nil)
     => realizedProps(< P, N, ph(I, think, 0) ; CF >,
	    enabled({'wake : 'I \ I})) .
  eq realizedProps(S:State, enabled({'wake : 'I \ I}))
   = realFair(just : enabled({'wake : 'I \ I}) => {'wake : 'I \ I}) .

  crl [test2]:
        realizedProps(< P, N, ph(I, hungry, C) ; stk(J) ; CF >,
            nil)
     => realizedProps(< P, N, ph(I, hungry, C) ; stk(J) ; CF >,
	    enabled({'grab : 'I \ I}))
   if J == left(I) or J == right(I, N) .
  eq realizedProps(S:State, enabled({'grab : 'I \ I}))
   = realFair(fair : enabled({'grab : 'I \ I}) => {'grab : 'I \ I}) .
endm 


set verbose on .

red modelCheck(init(5), [] ~ deadlock) .
red modelCheck(init(5), ([] ~ lowerFirst) -> [] ~ deadlock) .

red modelCheckParamFair(init(6), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(init(12), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(init(18), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(init(24), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(init(30), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(init(36), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(init(42), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(init(48), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .

red modelCheckParamFair(init(54), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .
red modelCheckParamFair(init(60), ([] ~ deadlock -> <> eating(1)),
    noFairness, flag(seParam,jfParam)) .

