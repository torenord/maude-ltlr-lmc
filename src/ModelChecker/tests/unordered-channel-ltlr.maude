
fmod UNORDERED-CHANNEL-EQ is
  protecting NAT .
  vars N M J K : Nat .      vars L P Q : List .

--- list
  sort List .
  op nil : -> List [ctor] .
  op _;_ : Nat List -> List [ctor] .   *** list constructor
  op _@_ : List List -> List .      *** list append

  eq nil @ L = L .
  eq (N ; L) @ P = N ; (L @ P) . 

--- conf
  sort Conf .
  op null : -> Conf [ctor] .
  op __ : Conf Conf -> Conf [ctor assoc comm id: null] .

--- msg
  sort Msg .
  subsort Msg < Conf .
  op [_,_] : Nat Nat -> Msg [ctor] .
  op ack : Nat -> Msg [ctor] .

--- state
  sort ChannelState .
  op {_,_|_|_,_} : List Nat Conf List Nat -> ChannelState [ctor] .
endfm

mod UNORDERED-CHANNEL is
  pr UNORDERED-CHANNEL-EQ .
  vars N M J K : Nat .      vars L P Q : List .  var  C : Conf .

  rl [snd]: {N ; L, M | C | P, K} => {N ; L, M | [N, M] C | P, K} .
  rl [rec]: {L, M | [N, J] C | P, J}  
    => {L, M | ack(J) C | P @ (N ; nil), s(J)}  .
  rl [rec-ack]: {N ; L, J | ack(J) C | P, M}  => {L, s(J) | C | P, M} .
endm

mod UNORDERED-CHANNEL-ABSTRACTION is
  including UNORDERED-CHANNEL .
  vars M N P K : Nat .  vars L L' L'' : List .  var C : Conf .
  eq [A1]: {L, M | [N, P] [N, P] C | L', K} = {L, M | [N, P] C | L', K} .
endm

mod UNORDERED-CHANNEL-ABSTRACTION-2 is
  extending UNORDERED-CHANNEL-ABSTRACTION .
  vars M N P K : Nat .  vars L L' L'' : List .  var C : Conf .
  rl [snd2]: {L, M | [N, K] C | L', K} => {L, M | [N, K] ack(K) C | L' @ N ; nil, s(K)} .
endm

load ltlr-checker

mod UNORDERED-CHANNEL-PREDS is
  protecting UNORDERED-CHANNEL .
  protecting SATISFACTION .

  vars M N K P : Nat . vars L L' L'' : List . var  C : Conf . var  B : Bool . 

  subsort ChannelState < State .

  ops prefix rec-q : List -> Prop .
  eq {L', N | C | K ; L'', P} |= prefix(M ; L) 
   = (M == K) and  ({L', N | C | L'', P} |=  prefix(L)) .
  eq {L', N | C | nil, K} |=  prefix(L) = true .
  eq {L', N | C | M ; L'', K} |=  prefix(nil) = false .

  eq {L', N | C | L'', K} |=  rec-q(L) = L == L'' .
endm

mod UNORDERED-CHANNEL-ABSTRACTION-CHECK is
    extending UNORDERED-CHANNEL-ABSTRACTION-2 .
    including UNORDERED-CHANNEL-PREDS .
    extending LTLR-MODEL-CHECKER .
    including SPATIAL-ACTION-PATTERN .
    including RULENAME-COUNTEREXAMPLE .

    op init : -> State .
    eq init = {0 ; s(0) ; s(s(0)) ; nil , 0 | null | nil , 0} .
endm

set verbose on .
red modelCheck(init, [] prefix(0 ; s(0) ; s(s(0)) ; nil)) .

--- false
red modelCheck(init, (<> rec-q(0 ; s(0) ; s(s(0)) ; nil))) .

--- true
red modelCheck(init, (<> rec-q(0 ; s(0) ; s(s(0)) ; nil)) \/ (<>[] {'snd})) .


